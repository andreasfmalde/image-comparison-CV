%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Matlab code to analyse the performance of image quality metrics on the 
%Colourlab Image Database: Image Quality. If you are using the database 
%and this code please cite our work. 
%
%Written by Marius Pedersen (marius.pedersen@hig.no)
% Version 1.0 - 23.06.14
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Citation:
%Xinwei Liu, Marius Pedersen and Jon Yngve Hardeberg. CID:IQ - A New Image 
%Quality Database. International Conference on Image and Signal Processing 
%(ICISP 2014). Vol. 8509. Cherbourg, France. Jul., 2014.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [] = CorrCIDIQ(d)
clear all
uiopen() %displays window to open the result file
if(d == 50) %if the distance is 50 cm the load subjective scores for this distance
    load MOS50.mat
    MOS = MOS50; 
elseif(d ==100) %if the distance is 100 cm the load subjective scores for this distance
    load MOS100.mat
    MOS = MOS100; 
else
    error('Unknown distance')
end
names = fieldnames(Results);
NumberDatapoints = 690; %the entire database contains 690 images, which is important for the calculation of the confidence intervals
warning off; 


%% Parameters for subplot
TotalNumberofMetrics = length(names)-2; 
if(TotalNumberofMetrics == 1) %if only one metric has been calculated
    X_NumberofMetrics = 1; 
    Y_NumberofMetrics = 1;
else
    if(TotalNumberofMetrics == 2) %if two metrics have been calculated
        X_NumberofMetrics = TotalNumberofMetrics;
    else(floor(TotalNumberofMetrics/2) == 1) %if more than 2
    X_NumberofMetrics = floor(TotalNumberofMetrics/2)      
    end
    if(TotalNumberofMetrics - X_NumberofMetrics == 0)
        Y_NumberofMetrics = 1; 
    else
        Y_NumberofMetrics = TotalNumberofMetrics - X_NumberofMetrics;
    end
end
CounterMetrics = 0;

figure('units','normalized','outerposition',[0 0 1 1])

%% Loop through all metrics
    for k=1:1:length(names) %loop through all metrics
    if(strcmp(names(k), 'Original_Name')) %skip since it is not a metric
    elseif(strcmp(names(k), 'Reproduction_Name')) %skip since it is not a metric        
    else
        CounterMetrics = CounterMetrics +1; %increasing counter for metrics
        disp(['Calculating scores for ', char(names(k))]); 
        ResultsCID = getfield(Results,char(names(k))); %extracting results for a single metric 
        XtickNames(CounterMetrics) = names(k);
        
        %Making a plot for the metric
        subplot(X_NumberofMetrics,Y_NumberofMetrics,CounterMetrics); %subplot used to plot all metrics in the same window
        p = plot(ResultsCID,MOS,'+');
        set(p,'Color','blue','LineWidth',1);
        
        %Non-linear correlation for all images%
        [mosFit , ypreFit,bayta ehat,J ] = LogisticFitting(MOS,ResultsCID');
        RMSE(CounterMetrics) = sqrt(sum((ypreFit - mosFit).^2) / length(mosFit));%root meas squared error
        corr_coefPearson(CounterMetrics) = corr(mosFit, ypreFit, 'type','Pearson'); %pearson linear coefficient
        corr_coefSpearman(CounterMetrics) = corr(mosFit, ypreFit, 'type','Spearman'); %pearson linear coefficient
        corr_coefKendall(CounterMetrics) = corr(mosFit, ypreFit, 'type','Kendall'); %pearson linear coefficient

        
        %calculating 95% confidence interval for non-linear correlation
        High_limit_coefPearson(CounterMetrics) = ((exp(2*(1/2*log((1+corr_coefPearson(CounterMetrics))/(1-corr_coefPearson(CounterMetrics))) + 1.96*(1/(sqrt(NumberDatapoints-3)))))-1)/(exp(2*(1/2*log((1+corr_coefPearson(CounterMetrics))/(1-corr_coefPearson(CounterMetrics))) + 1.96*(1/(sqrt(NumberDatapoints-3)))))+1));
        Low_limit_coefPearson(CounterMetrics) = (exp(2*(1/2*log((1+corr_coefPearson(CounterMetrics))/(1-corr_coefPearson(CounterMetrics))) - 1.96*(1/(sqrt(NumberDatapoints-3)))))-1)/(exp(2*(1/2*log((1+corr_coefPearson(CounterMetrics))/(1-corr_coefPearson(CounterMetrics))) - 1.96*(1/(sqrt(NumberDatapoints-3)))))+1);

        High_limit_coefSpearman(CounterMetrics) = ((exp(2*(1/2*log((1+corr_coefSpearman(CounterMetrics))/(1-corr_coefSpearman(CounterMetrics))) + 1.96*(1/(sqrt(NumberDatapoints-3)))))-1)/(exp(2*(1/2*log((1+corr_coefSpearman(CounterMetrics))/(1-corr_coefSpearman(CounterMetrics))) + 1.96*(1/(sqrt(NumberDatapoints-3)))))+1));
        Low_limit_coefSpearman(CounterMetrics) = (exp(2*(1/2*log((1+corr_coefSpearman(CounterMetrics))/(1-corr_coefSpearman(CounterMetrics))) - 1.96*(1/(sqrt(NumberDatapoints-3)))))-1)/(exp(2*(1/2*log((1+corr_coefSpearman(CounterMetrics))/(1-corr_coefSpearman(CounterMetrics))) - 1.96*(1/(sqrt(NumberDatapoints-3)))))+1);

        
        
        %If the results are 'inf' then put the maximum to a value that is
        %not 'inf', in this case the maximum value that is not 'inf'
        if(isinf(max(ResultsCID)))
            Maximum = max(max(ResultsCID(isfinite(ResultsCID)),1));
        else 
            Maximum = max(ResultsCID);
        end

        %adding the non-linear regression line to the plot
        t = min(ResultsCID):0.001:Maximum;
        [ypreFit junk] = nlpredci(@logistic,t,bayta,ehat,J); %Nonlinear regression prediction confidence intervals 
        hold on;
        p = plot(t,ypreFit);%plotting the nonlinear regression line
        set(p,'Color','black','LineWidth',2); %setting it to have a wider line width and black
        legend('Images in CID:IQ','Curve fitted with logistic function', 'Location','NorthWest'); %adding legend
        xlabel('Objective score by metric'); %adding xlabel 
        ylabel(['MOS (', num2str(d), ' cm)']); % adding ylabel 
        title(char(names(k))); %adding title, being the name of the metric

        
        %Clearing variables
        clear  mosFit ypreFit bayta ehat J  Maximum ResultsCID p t junk
    end
end

%% Barplot Pearson correlation with confidence intervals%% 

High_limit_coefPearson = High_limit_coefPearson -corr_coefPearson; %finding the value to add to the bar plot for the confidence interval
Low_limit_coefPearson = corr_coefPearson- Low_limit_coefPearson;  %finding the value to add to the bar plot for the confidence interval

figure; 
barSettings = {};
lineSettings = {High_limit_coefPearson', 'linestyle', 'none','linewidth',3}; 
x = 1:CounterMetrics; % x-axis 
errorbarbar(x, corr_coefPearson', Low_limit_coefPearson', barSettings, lineSettings);
ylabel('Pearson Correlation')
xlabel('Metrics')
set(gca,'XTickLabel',XtickNames)
title(strcat('Pearson correlation values with a 95% confidence interval. Viewing distance ', num2str(d), ' cm'))
axis([0.5 CounterMetrics+0.5 0 1]) %setting the axis to go from 0 to 1 for the correlation

%% Barplot Spearman correlation with confidence intervals
High_limit_coefSpearman = High_limit_coefSpearman -corr_coefSpearman; %finding the value to add to the bar plot for the confidence interval
Low_limit_coefSpearman = corr_coefSpearman- Low_limit_coefSpearman;  %finding the value to add to the bar plot for the confidence interval

figure; 
barSettings = {};
lineSettings = {High_limit_coefSpearman', 'linestyle', 'none','linewidth',3}; 
x = 1:CounterMetrics; % x-axis 
errorbarbar(x, corr_coefSpearman', Low_limit_coefSpearman', barSettings, lineSettings);
ylabel('Spearman correlation');
xlabel('Metrics');
set(gca,'XTickLabel',XtickNames);
title(['Spearman correlation values with a 95% confidence interval. Viewing distance ', num2str(d), ' cm']);
axis([0.5 CounterMetrics+0.5 0 1]) %setting the axis to go from 0 to 1 for the correlation

%% barplot RMSE 
figure; 
bar(RMSE);
ylabel('RMSE');
xlabel('Metrics');
set(gca,'XTickLabel',XtickNames);
title(['RMSE. Viewing distance ', num2str(d), ' cm']);

%% Export to Latex
%Exporting all results to a latex table. This can be used in any latex
%document by using  /input{PearsonCorrelationNonLinear.tex}
columnLabels = {'Pearson', 'Spearman', 'Kendall'};
rowLabels = XtickNames; 
matrix2latex(corr_coefPearson', ['PearsonCorrelationNonLinear_', num2str(d) ,'cm.tex'], 'columnLabels', {'Pearson'},'rowLabels', rowLabels, 'alignment', 'c', 'format', '%-6.3f'); %table with Pearson correlation values
matrix2latex(corr_coefSpearman', ['SpearmanCorrelationNonLinear_', num2str(d),'cm.tex'], 'columnLabels', {'Spearman'},'rowLabels', rowLabels, 'alignment', 'c', 'format', '%-6.3f'); %table with Spearman correlation values
matrix2latex(corr_coefKendall', ['KendallCorrelationNonLinear_',num2str(d),'cm.tex'], 'columnLabels', {'Kendall'},'rowLabels', rowLabels, 'alignment', 'c', 'format', '%-6.3f'); %table with Kendall correlation values

matrix2latex([corr_coefPearson; corr_coefSpearman; corr_coefKendall;]', ['CorrelationNonLinear_',num2str(d),'cm.tex'], 'columnLabels', columnLabels, 'rowLabels', rowLabels, 'alignment', 'c', 'format', '%-6.3f'); %table with Pearson, Spearman and Kendall correlation values

matrix2latex(RMSE', ['RMSE_',num2str(d),'cm.tex'], 'columnLabels', {'RMSE'}, 'rowLabels', rowLabels, 'alignment', 'c', 'format', '%-6.3f'); %table with RMSE values


corr_coefPearson
end